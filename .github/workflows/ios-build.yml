name: Build iOS App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build React app
      run: npm run build
      
    - name: Setup Capacitor
      run: |
        npm install -g @capacitor/cli@latest
        npm install @capacitor/core@latest @capacitor/ios@latest
        
    - name: Initialize Capacitor (if needed)
      run: |
        if [ ! -f "capacitor.config.ts" ]; then
          npx cap init "REDash" "com.redash.app" --web-dir=dist
        fi
        
    - name: Add iOS platform
      run: npx cap add ios
      
    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.0'
        
    - name: Update CocoaPods and clear cache
      run: |
        sudo gem install cocoapods --force
        pod repo update
        pod cache clean --all
        
    - name: Create minimal Podfile
      run: |
        cat > ios/App/Podfile << 'EOF'
        require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'

        platform :ios, '13.0'
        use_frameworks!

        def capacitor_pods
          pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
          pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
        end

        target 'App' do
          capacitor_pods
        end

        post_install do |installer|
          assertDeploymentTarget(installer)
        end
        EOF
        
    - name: Install iOS dependencies with verbose output
      run: |
        cd ios/App
        pod install --verbose --repo-update
        
    - name: Sync Capacitor
      run: npx cap sync ios
        
    - name: List available simulators and runtimes
      run: |
        xcrun simctl list devices available
        xcrun simctl list runtimes
        echo "=== Available device types ==="
        xcrun simctl list devicetypes
        
    - name: Find available iOS simulator
      id: find-simulator
      run: |
        # Get the latest available iOS runtime
        LATEST_IOS=$(xcrun simctl list runtimes | grep "iOS" | grep -v "watchOS" | grep -v "tvOS" | tail -1 | sed 's/.*iOS \([0-9.]*\).*/\1/')
        echo "Latest iOS version found: $LATEST_IOS"
        
        # Get available iPhone simulators
        AVAILABLE_IPHONE=$(xcrun simctl list devices available | grep "iPhone" | head -1 | sed 's/.*iPhone \([^(]*\).*/iPhone \1/' | sed 's/[[:space:]]*$//')
        echo "Available iPhone: $AVAILABLE_IPHONE"
        
        # Set outputs for use in build steps
        echo "ios_version=$LATEST_IOS" >> $GITHUB_OUTPUT
        echo "device_name=$AVAILABLE_IPHONE" >> $GITHUB_OUTPUT
        
        echo "Will use destination: platform=iOS Simulator,name=$AVAILABLE_IPHONE,OS=$LATEST_IOS"
        
    - name: Build iOS app for simulator
      run: |
        cd ios/App
        # Build for iOS Simulator using dynamically detected version
        xcodebuild -workspace App.xcworkspace \
          -scheme App \
          -configuration Debug \
          -destination "platform=iOS Simulator,name=${{ steps.find-simulator.outputs.device_name }},OS=${{ steps.find-simulator.outputs.ios_version }}" \
          -derivedDataPath ./build \
          build
          
    - name: Archive iOS app
      run: |
        cd ios/App
        # Build for device using dynamically detected version (unsigned for CI)
        xcodebuild -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination "generic/platform=iOS,OS=${{ steps.find-simulator.outputs.ios_version }}" \
          -archivePath ./REDash.xcarchive \
          archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Create IPA (if archive succeeds)
      run: |
        cd ios/App
        if [ -d "./REDash.xcarchive" ]; then
          xcodebuild -exportArchive \
            -archivePath ./REDash.xcarchive \
            -exportPath ./export \
            -exportOptionsPlist ../../export-options.plist
        fi
      continue-on-error: true
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: |
          ios/App/REDash.xcarchive
          ios/App/export
          ios/App/build
        retention-days: 30
        if-no-files-found: warn
