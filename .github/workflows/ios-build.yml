name: Build iOS App for TestFlight/App Store

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build React app for production
      run: npm run build
      
    - name: Setup Capacitor
      run: |
        npm install -g @capacitor/cli@latest
        npm install @capacitor/core@latest @capacitor/ios@latest
        
    - name: Initialize Capacitor (if needed)
      run: |
        if [ ! -f "capacitor.config.ts" ]; then
          npx cap init "REDash" "com.redash.app" --web-dir=dist
        fi
        
    - name: Add iOS platform
      run: npx cap add ios
      
    - name: Show Xcode and simulator info
      run: |
        echo "=== Xcode Version ==="
        xcodebuild -version
        echo ""
        echo "=== Available iOS Simulators ==="
        xcrun simctl list devices available
        echo ""
        echo "=== Available Runtimes ==="
        xcrun simctl list runtimes
        
    - name: Update CocoaPods
      run: |
        sudo gem install cocoapods --force
        pod repo update
        
    - name: Install iOS dependencies
      run: |
        cd ios/App
        pod install --repo-update
        
    - name: Sync Capacitor
      run: npx cap sync ios
      
    - name: Configure iOS project for production
      run: |
        cd ios/App
        
        # Update Info.plist for production
        /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName REDash" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion 1.0.0" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString 1.0.0" App/Info.plist
        
        # Add required permissions for camera/photo library
        /usr/libexec/PlistBuddy -c "Add :NSCameraUsageDescription string 'This app needs camera access to take photos of properties for your transactions.'" App/Info.plist || true
        /usr/libexec/PlistBuddy -c "Add :NSPhotoLibraryUsageDescription string 'This app needs photo library access to select images for your transactions.'" App/Info.plist || true
        
        echo "=== Info.plist Configuration ==="
        cat App/Info.plist
        
    - name: Find available iOS simulator
      id: find-simulator
      run: |
        echo "=== Finding Available iOS Simulator ==="
        
        # Get all available devices and find the first iPhone
        SIMULATOR_LINE=$(xcrun simctl list devices available | grep "iPhone" | head -1)
        echo "Found simulator line: $SIMULATOR_LINE"
        
        if [ -z "$SIMULATOR_LINE" ]; then
          echo "No iPhone simulators found, trying iPad..."
          SIMULATOR_LINE=$(xcrun simctl list devices available | grep "iPad" | head -1)
        fi
        
        if [ -z "$SIMULATOR_LINE" ]; then
          echo "No simulators found!"
          exit 1
        fi
        
        # Extract device name (text before the first parenthesis)
        DEVICE_NAME=$(echo "$SIMULATOR_LINE" | sed 's/^[[:space:]]*//' | sed 's/ (.*//')
        echo "Device name: '$DEVICE_NAME'"
        
        # Find the iOS version by looking at the section this device is under
        IOS_VERSION=$(xcrun simctl list devices available | grep -B 10 "$SIMULATOR_LINE" | grep "-- iOS" | tail -1 | sed 's/.*iOS \([0-9.]*\).*/\1/')
        
        if [ -z "$IOS_VERSION" ]; then
          # Fallback: get any iOS runtime version
          IOS_VERSION=$(xcrun simctl list runtimes | grep "iOS" | head -1 | awk '{print $2}')
        fi
        
        echo "iOS version: '$IOS_VERSION'"
        echo "device_name=$DEVICE_NAME" >> $GITHUB_OUTPUT
        echo "ios_version=$IOS_VERSION" >> $GITHUB_OUTPUT
        
    - name: Build iOS app for simulator (testing)
      run: |
        cd ios/App
        echo "Building for simulator: ${{ steps.find-simulator.outputs.device_name }} (iOS ${{ steps.find-simulator.outputs.ios_version }})"
        
        xcodebuild -workspace App.xcworkspace \
          -scheme App \
          -configuration Debug \
          -destination "platform=iOS Simulator,name=${{ steps.find-simulator.outputs.device_name }},OS=${{ steps.find-simulator.outputs.ios_version }}" \
          -derivedDataPath ./build-simulator \
          build
      continue-on-error: true
        
    - name: Build iOS app for generic device (production)
      run: |
        cd ios/App
        echo "Building for generic iOS device (production build)..."
        
        xcodebuild -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination "generic/platform=iOS" \
          -derivedDataPath ./build-device \
          build \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
    - name: Archive iOS app for TestFlight/App Store
      run: |
        cd ios/App
        echo "Creating production archive for TestFlight/App Store..."
        
        xcodebuild -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination "generic/platform=iOS" \
          -archivePath ./REDash-Production.xcarchive \
          archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
    - name: Export IPA for TestFlight
      run: |
        cd ios/App
        if [ -d "./REDash-Production.xcarchive" ]; then
          echo "Creating production IPA for TestFlight..."
          
          # Create export options for App Store distribution
          cat > ExportOptions.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>uploadBitcode</key>
            <false/>
            <key>compileBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>thinning</key>
            <string>&lt;none&gt;</string>
        </dict>
        </plist>
        EOF
          
          xcodebuild -exportArchive \
            -archivePath ./REDash-Production.xcarchive \
            -exportPath ./export-production \
            -exportOptionsPlist ./ExportOptions.plist || echo "Export failed - this is expected without proper code signing"
        else
          echo "Archive not found, skipping IPA export"
        fi
      continue-on-error: true
        
    - name: Create app metadata for App Store
      run: |
        mkdir -p app-store-metadata
        
        cat > app-store-metadata/app-info.txt << 'EOF'
        REDash - Real Estate Goal Tracking App
        
        App Store Information:
        - App Name: REDash
        - Bundle ID: com.redash.app
        - Version: 1.0.0
        - Category: Business/Productivity
        - Target Audience: Real Estate Professionals
        
        Key Features:
        - Annual goal setting and tracking
        - Transaction management (Active, Under Contract, Closed)
        - Progress visualization with color-coded charts
        - Photo uploads for property transactions
        - Monthly push notification reminders
        - Buyer and Seller transaction separation
        - Sales volume and commission tracking
        
        App Store Description:
        REDash helps real estate professionals track their annual goals and manage transactions efficiently. Set yearly targets for closed transactions, sales volume, and commission income, then track your progress with beautiful visual charts. Manage your active, under contract, and closed transactions with photo uploads and detailed records.
        
        Privacy Policy Required: Yes (app collects user data)
        Uses Camera: Yes (for property photos)
        Uses Push Notifications: Yes (monthly reminders)
        
        Next Steps for App Store Submission:
        1. Create App Store Connect record
        2. Add proper code signing certificates
        3. Upload signed build via Xcode or Application Loader
        4. Fill out app metadata and screenshots
        5. Submit for Apple review
        EOF
        
    - name: Upload production build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-production-build
        path: |
          ios/App/build-device
          ios/App/REDash-Production.xcarchive
          ios/App/export-production
          app-store-metadata
        retention-days: 30
        if-no-files-found: warn
